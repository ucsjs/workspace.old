// Auto-generated by Blueprint 

import { Subject } from 'rxjs';
import { Blueprint, Flow } from "@ucsjs/blueprint";
import { MongoConnectionBlueprint } from "node_modules/@ucsjs/mongodb/src/blueprints/mongoConnection.blueprint";
import { HTTPInBlueprint } from "src/blueprints/Network/httpIn.blueprint";
import { HTTPOutBlueprint } from "src/blueprints/Network/httpOut.blueprint";
import { MongoSchemaBlueprint } from "node_modules/@ucsjs/mongodb/src/blueprints/mongoSchema.blueprint";
import { MongoFindBlueprint } from "node_modules/@ucsjs/mongodb/src/blueprints/mongoFind.blueprint";
import { HTTPParamBlueprint } from "src/blueprints/Network/httpParam.blueprint";

export class TodoBlueprint extends Blueprint {
	exec(args?: any){
		const subject = new Subject<any>();

		const flow = new Flow({
			mongoconnectionblueprint0: new MongoConnectionBlueprint({"stateId":1663848850050,"itemKey":"0","protocol":"mongodb+srv","host":"soucrypto-ea71c61c.mongo.ondigitalocean.com","ignorePort":true,"user":"doadmin","pass":"2w6yh91t3J7pA4L5","db":"soucrypto","replicaSet":"soucrypto","tls":true}),
			httpinblueprint1: new HTTPInBlueprint({"stateId":1663848850050,"itemKey":"1","controller":"/todo","routes":[{"url":"/","key":"c782a1bf7f74c0a22eb8d764d6b7c9ba20300670-1-0"},{"url":"/:id","key":"c782a1bf7f74c0a22eb8d764d6b7c9ba20300670-1-1"}]}),
			httpoutblueprint2: new HTTPOutBlueprint(),
			mongoschemablueprint3: new MongoSchemaBlueprint({"stateId":1663848850050,"itemKey":"3","collection":"todo","timestamps":true,"fields":[{"name":"title","index":true,"required":true,"key":"0201a0411d7de880c8bd40d11274259eb733a0a9-3-0"}]}),
			mongofindblueprint4: new MongoFindBlueprint({"stateId":1663848850050,"itemKey":"4","query":{}}),
			httpparamblueprint5: new HTTPParamBlueprint({"stateId":1663848850050,"itemKey":"5","name":"id","toJSON":true}),
			httpoutblueprint6: new HTTPOutBlueprint(),
			mongofindblueprint7: new MongoFindBlueprint(),
		}, subject, args);

		flow.subscribe("httpinblueprint1", "c782a1bf7f74c0a22eb8d764d6b7c9ba20300670-1-0", "httpoutblueprint2", "request")
		flow.subscribe("mongoconnectionblueprint0", "connection", "mongoschemablueprint3", "connection")
		flow.subscribe("mongoschemablueprint3", "schema", "mongofindblueprint4", "schema")
		flow.subscribe("mongofindblueprint4", "result", "httpoutblueprint2", "contents")
		flow.subscribe("httpinblueprint1", "c782a1bf7f74c0a22eb8d764d6b7c9ba20300670-1-1", "httpparamblueprint5", "request")
		flow.subscribe("httpinblueprint1", "c782a1bf7f74c0a22eb8d764d6b7c9ba20300670-1-1", "httpoutblueprint6", "request")
		flow.subscribe("httpparamblueprint5", "result", "mongofindblueprint7", "query")
		flow.subscribe("mongoschemablueprint3", "schema", "mongofindblueprint7", "schema")
		flow.subscribe("mongofindblueprint7", "result", "httpoutblueprint6", "contents")
		flow.start();

		return { flow, subject };
	}
}

import { Document, Model, createConnection } from "mongoose";
import { MongooseModule, Prop, Schema, SchemaFactory, InjectModel } from '@nestjs/mongoose';

let mongodb_0 = null;
try{ mongodb_0 = createConnection("mongodb+srv://doadmin:2w6yh91t3J7pA4L5@soucrypto-ea71c61c.mongo.ondigitalocean.com/soucrypto?replicaSet=soucrypto&tls=true&authSource=admin"); }catch(e){}
import { Controller, Req, Res, Get, Post, Put, Delete, Patch } from "@nestjs/common";
import { Request, Response } from "express";

@Controller("/todo")
export class TodoBlueprintController {

    constructor(){}

    @Get("/")
    async todoblueprintget_(@Req() req: Request, @Res() res: Response){
        const { flow } = new TodoBlueprint().exec({mongodb_0, TodoSchema});

		flow.get("httpoutblueprint2").subscribe("output", (data) => { 
            if(data){
                flow.get("httpoutblueprint2")?.unsubscribe("output");
                res.status(200).send(data); 
            }
        });

		flow.get("httpinblueprint1").next("c782a1bf7f74c0a22eb8d764d6b7c9ba20300670-1-0", req);
    }

    @Get("/:id")
    async todoblueprintget_id(@Req() req: Request, @Res() res: Response){
        const { flow } = new TodoBlueprint().exec({mongodb_0, TodoSchema});

		flow.get("httpoutblueprint6").subscribe("output", (data) => { 
            if(data){
                flow.get("httpoutblueprint6")?.unsubscribe("output");
                res.status(200).send(data); 
            }
        });

		flow.get("httpinblueprint1").next("c782a1bf7f74c0a22eb8d764d6b7c9ba20300670-1-1", req);
    }
}

export interface Todo {
	title: string;
};

@Schema({ timestamps: true, collection: "todo" })
export class TodoDocument extends Document implements Todo {
	@Prop({ required: true, index:true, type: String, unique: false })
        title: string;
};

export const TodoSchema = SchemaFactory.createForClass(TodoDocument);
import { Module } from "@nestjs/common";

@Module({
    imports: [
		
	],
    exports: [
		
	],
    controllers: [
		TodoBlueprintController
	],
    providers: [
		
	]
})
export class LazyModule {}