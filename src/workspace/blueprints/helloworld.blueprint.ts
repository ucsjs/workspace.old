// Auto-generated by Blueprint 

import { Subject } from 'rxjs';
import { Blueprint, Flow } from "@ucsjs/blueprint";
import { HTTPInBlueprint } from "src/blueprints/Network/httpIn.blueprint";
import { MongoConnectionBlueprint } from "node_modules/@ucsjs/mongodb/src/blueprints/mongoConnection.blueprint";
import { MongoSchemaBlueprint } from "node_modules/@ucsjs/mongodb/src/blueprints/mongoSchema.blueprint";
import { JSONBlueprint } from "src/blueprints/Common/json.blueprint";
import { HTTPOutBlueprint } from "src/blueprints/Network/httpOut.blueprint";

export class HelloworldBlueprint extends Blueprint { 
    constructor(injection?: any){
        super(injection);
    }

	exec(){
		const subject = new Subject<any>();

		const flow = new Flow({
			httpinblueprint0: new HTTPInBlueprint({"stateId":1663151686486,"controller":"/todo","routes":[{"url":"/","key":"c782a1bf7f74c0a22eb8d764d6b7c9ba20300670-0-0"},{"url":"/:id","key":"c782a1bf7f74c0a22eb8d764d6b7c9ba20300670-0-1"}]}),
			mongoconnectionblueprint1: new MongoConnectionBlueprint({"stateId":1663151686487,"protocol":"mongodb+srv","host":"soucrypto-ea71c61c.mongo.ondigitalocean.com","ignorePort":true,"user":"doadmin","pass":"2w6yh91t3J7pA4L5","db":"soucrypto","replicaSet":"soucrypto","tls":true}),
			mongoschemablueprint2: new MongoSchemaBlueprint({"stateId":1663151686487,"collection":"todo","timestamps":true}),
			jsonblueprint3: new JSONBlueprint({"stateId":1663151686487,"document":{}}),
			httpoutblueprint4: new HTTPOutBlueprint(),
		}, subject);

		flow.subscribe("mongoconnectionblueprint1", "connection", "mongoschemablueprint2", "connection")
		flow.output("httpoutblueprint4", "output")
		flow.subscribe("httpinblueprint0", "c782a1bf7f74c0a22eb8d764d6b7c9ba20300670-0-0", "httpoutblueprint4", "request")
		flow.subscribe("jsonblueprint3", "state", "httpoutblueprint4", "contents")
		flow.start();

		return { flow, subject };
	}
}

import { Controller, Req, Res, Get, Post, Put, Delete, Patch } from "@nestjs/common";
import { Request, Response } from "express";
import { Document, Model } from "mongoose";
import { MongooseModule, Prop, Schema, SchemaFactory, InjectModel } from '@nestjs/mongoose';

@Controller("/todo")
export class HelloworldBlueprintController {
    constructor(
		@InjectModel("todo") private todoSchema: Model<TodoDocument>,
	){}

    @Get("/")
    async helloworldblueprintget_(@Req() req: Request, @Res() res: Response){
        const { subject, flow } = new HelloworldBlueprint({todoSchema: this.todoSchema}).exec();
        subject.subscribe((data) => { res.status(200).send(data); });
        flow.get("httpinblueprint0").next("c782a1bf7f74c0a22eb8d764d6b7c9ba20300670-0-0", req);
    }

    @Get("/:id")
    async helloworldblueprintget_id(@Req() req: Request, @Res() res: Response){
        const { subject, flow } = new HelloworldBlueprint({todoSchema: this.todoSchema}).exec();
        subject.subscribe((data) => { res.status(200).send(data); });
        flow.get("httpinblueprint0").next("c782a1bf7f74c0a22eb8d764d6b7c9ba20300670-0-1", req);
    }
}

export interface Todo {
};

@Schema({ timestamps: true, collection: "todo" })
export class TodoDocument extends Document implements Todo {};

export const TodoSchema = SchemaFactory.createForClass(TodoDocument);
import { Module } from "@nestjs/common";

@Module({
    imports: [
		MongooseModule.forRoot('mongodb+srv://doadmin:2w6yh91t3J7pA4L5@soucrypto-ea71c61c.mongo.ondigitalocean.com/soucrypto?replicaSet=soucrypto&tls=true&authSource=admin', {
            connectionName: "mongodb-1663151686457",
            dbName: "soucrypto",
            user: "doadmin",
            pass: "2w6yh91t3J7pA4L5"
        }),
		MongooseModule.forFeature([{ name: "todo", schema: TodoSchema }])
	],
    exports: [
		
	],
    controllers: [
		HelloworldBlueprintController
	],
    providers: [
		
	]
})
export class LazyModule {}